import matplotlib.pyplot as plt
import numpy as np

plt.rcParams['font.sans-serif'] = 'SimSun'
plt.rcParams['font.serif'] = 'Times New Roman'
plt.rcParams['font.size'] = 15

plt.figure(figsize=(10,3))

avg_finished_time = np.loadtxt("avg_finished_time7.0")

datalen = 2010 if len(avg_finished_time) > 2010 else len(avg_finished_time)

plt.plot(np.arange(datalen), avg_finished_time[:datalen], label="Ours", linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*282.35, label="Optimal", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*362.6101, label="Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*340.8067, label="Partition Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*701.6326, label="Partition Random", alpha = 0.75, linewidth = 2)

plt.ylabel("完成时间 / 秒")
plt.xlabel("训练回合")
plt.yticks([300,400,500,600,700])
plt.legend()
plt.savefig("avg_finished_time7.0.png", bbox_inches='tight', pad_inches=0.05, dpi=600)
plt.close('all')


plt.rcParams['font.sans-serif'] = 'SimSun'
plt.rcParams['font.serif'] = 'Times New Roman'
plt.rcParams['font.size'] = 15

plt.figure(figsize=(10,3))

avg_finished_time = np.loadtxt("avg_finished_time7.2")

datalen = 2010 if len(avg_finished_time) > 2010 else len(avg_finished_time)

plt.plot(np.arange(datalen), avg_finished_time[:datalen], label="Ours", linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*289.2826, label="Optimal", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*366.3894, label="Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*282.0219, label="Partition Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*585.1819, label="Partition Random", alpha = 0.75, linewidth = 2)

plt.ylabel("完成时间 / 秒")
plt.xlabel("训练回合")
plt.yticks([300,400,500,600,700])
plt.legend()
plt.savefig("avg_finished_time7.2.png", bbox_inches='tight', pad_inches=0.05, dpi=600)
plt.close('all')


plt.rcParams['font.sans-serif'] = 'SimSun'
plt.rcParams['font.serif'] = 'Times New Roman'
plt.rcParams['font.size'] = 15

plt.figure(figsize=(10,3))

avg_finished_time = np.loadtxt("avg_finished_time7.3")

datalen = 2010 if len(avg_finished_time) > 2010 else len(avg_finished_time)

plt.plot(np.arange(datalen), avg_finished_time[:datalen], label="Ours", linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*283.9254, label="Optimal", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*292.3838, label="Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*352.81, label="Partition Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*606.53, label="Partition Random", alpha = 0.75, linewidth = 2)

plt.ylabel("完成时间 / 秒")
plt.xlabel("训练回合")
plt.yticks([300,400,500,600,700])
plt.legend()
plt.savefig("avg_finished_time7.3.png", bbox_inches='tight', pad_inches=0.05, dpi=600)
plt.close('all')

plt.close('all')


plt.rcParams['font.sans-serif'] = 'SimSun'
plt.rcParams['font.serif'] = 'Times New Roman'
plt.rcParams['font.size'] = 15

plt.figure(figsize=(10,3))

avg_finished_time = np.loadtxt("avg_finished_time7.9")

datalen = 2510 if len(avg_finished_time) > 2510 else len(avg_finished_time)

plt.plot(np.arange(datalen), avg_finished_time[:datalen], label="Ours", linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*1514.90, label="Optimal", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*2422.84, label="Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*2122.66, label="Partition Nearest", alpha = 0.75, linewidth = 2)
plt.plot(np.arange(datalen), np.ones(datalen)*5900.95, label="Partition Random", alpha = 0.75, linewidth = 2)

plt.ylabel("完成时间 / 秒")
plt.xlabel("训练回合")
# plt.yticks([300,400,500,600,700])
plt.legend()
plt.savefig("avg_finished_time7.9.png", bbox_inches='tight', pad_inches=0.05, dpi=600)
plt.close('all')


plt.rcParams['font.sans-serif'] = 'SimSun'
plt.rcParams['font.serif'] = 'Times New Roman'
plt.rcParams['font.size'] = 12
plt.figure(figsize=(6,4))
# 生成示例数据
x = ["Partition\nRandom", "Partition\nNearest", "Nearest", "Ours"]
y = np.array([628.38,342.79,330.84,286.23])
error_up = np.array([812.82,361.65,412.49,346.62])
error_down = np.array([497.53,332.29,287.20,274.98])

# pnearest_list, mean: 342.79610932427795, max: 361.65490501974176, min: 332.290212754531
pnearest_list = [339.5942617776662, 341.70459892635665, 336.41837365221255, 342.18167665379394, 344.6861667011432, 336.5380924194145, 340.05056293110823, 340.4040563569837, 361.65490501974176, 342.76098553911504, 339.1879948087229, 344.19080152918553, 345.0208125670501, 342.0731678776013, 342.86599848466335, 340.9892609638606, 342.5331849781337, 336.57726136765024, 339.68209967117446, 341.2458689606995, 342.91581153364484, 342.84655041649864, 339.7498780475475, 340.82546262051005, 356.7686766639996, 344.9587909877952, 340.2389864642053, 344.27807703872196, 361.16590458119714, 339.2676223053345, 358.49986044288903, 343.602063529464, 345.6120620402498, 332.9434576229842, 340.18380085898514, 334.1102259250374, 342.805022833306, 336.18311885679867, 334.35243912394486, 344.39883714293, 346.384409932314, 338.66319003383944, 342.07890584145144, 340.34662032393857, 345.646083263538, 359.8252892343127, 340.56944238787736, 342.84607327580085, 344.6806121525264, 346.03639884104786, 345.2067688015972, 347.5242274823591, 343.75514999041434, 339.85191934326764, 340.85136887175486, 339.7402058669056, 338.1540736843204, 343.0879578831744, 339.02757748910756, 343.1140586074955, 360.97845552128854, 340.20828487530946, 344.8054848099838, 360.91863173072255, 343.44303105312036, 335.97176630210896, 342.4056521385223, 343.13400288383394, 336.53406718504954, 339.21684873296994, 341.2569948066971, 346.6785483558895, 335.4726865758854, 338.37881373655955, 347.4478005993637, 341.6304492156995, 337.43614321400696, 357.8820775887535, 344.14705018023335, 345.555131880993, 343.28312980175986, 338.5861206043395, 340.6686027230848, 342.39054960742544, 334.50111060187027, 341.6374817740932, 342.84232782186103, 339.23775804888754, 346.4939609797385, 358.83918051191444, 334.41436035344947, 339.41384715194425, 332.290212754531, 340.36555256674063, 340.18746903222524, 342.71825342811616, 344.15353221906116, 342.1464922379548, 341.2311835085116, 337.2507717839351]
# prandom_list, mean: 628.3847033204399, max: 812.8263232697715, min: 497.5390953521431
prandom_list = [699.9890918534394, 609.6448124009484, 653.363727998556, 582.5636768816589, 600.4185303114704, 538.6642071792309, 624.8415392945643, 665.0724663261531, 575.9498804724805, 741.3707351084905, 681.3668467368774, 667.4763669073557, 609.4646741616734, 769.2064719596328, 613.2574601274416, 603.4736376088578, 610.4293427785982, 730.8090972780373, 688.675501309751, 654.4492140257813, 575.9023498606567, 553.4088934117408, 640.965032593162, 668.5248576895491, 640.4677238393273, 675.1402535238668, 536.3601397824568, 636.1379186174339, 751.6493872754056, 545.6922731883326, 584.1984544761708, 567.401149364612, 580.0676588222428, 562.3043885063237, 761.4714913691831, 713.8896134609892, 510.9399870914331, 538.902327208286, 614.7107199365125, 635.8390585237349, 628.4705716913384, 574.1265241513817, 624.0254307133578, 710.0015615694425, 658.1878588814993, 612.1259812283791, 621.6400502440029, 604.4945685954392, 729.6473888440942, 652.3364004192682, 619.6168802757647, 569.3136572625743, 645.8766531860009, 497.5390953521431, 660.4469712826011, 667.8359039807543, 666.7039796441829, 631.8178968606469, 568.7208860765521, 560.0576131776556, 553.0661315640306, 624.8614529427779, 643.5950269199916, 598.895421989826, 556.4894838365269, 586.2751243852529, 684.4769594038897, 715.779915131063, 656.32159167358, 618.3579394852334, 632.4759194018707, 566.0533870219966, 578.8539544986819, 550.4179829520573, 668.3004301330614, 639.3915007814111, 533.2595176665845, 659.8252284544195, 812.8263232697715, 664.9294318784835, 521.4102214310582, 543.5624785241245, 621.832685238465, 571.7429660803133, 734.2117590365501, 629.069584015853, 592.6713814122355, 648.1360366297863, 736.9910034321091, 667.244746669426, 613.8666565685523, 657.320216208691, 675.658215161132, 582.6734380754785, 610.5991871894611, 670.3351833904602, 591.3817940763907, 671.6073204745363, 655.8569930077933, 580.3989093315727]
# alg_nearest_global, mean: 330.845839413423, max: 412.4945834923263, min: 287.2007101547202
alg_nearest_global = [354.89485966047835, 288.0647957753115, 289.67420490651557, 287.7307899833392, 374.1989238266383, 361.93572223109123, 290.3625442758741, 287.6150975542305, 367.437322503971, 358.78297746132546, 367.5151121911399, 290.90097949333455, 291.64150532482716, 298.61361369044687, 331.50595140174505, 289.9886353868146, 289.10874780448864, 380.0380521772087, 288.16968242126893, 369.6880082131044, 363.53980673325543, 299.6492542573262, 368.6746459164753, 364.88547155106374, 376.4392236308342, 363.46231513933503, 369.44890308703316, 294.40858824015385, 297.8119445371693, 354.10655257973013, 344.4029514871384, 291.61490753536646, 343.76815536888654, 357.9206208846762, 358.42501297367556, 393.4734147686807, 412.4945834923263, 355.45015352031925, 364.5856786487736, 367.5756238309981, 343.2054494591699, 398.90696766606663, 362.72296119336295, 366.36032797143446, 290.24934633560474, 344.8354711590943, 291.67128419929526, 289.6124096198961, 293.6808431586608, 341.66299784311377, 287.2714968376466, 298.4300174827824, 293.5831371342437, 366.7283286193686, 292.01745134857526, 353.17704620813197, 355.9395265555279, 362.4501511498021, 296.492999048694, 329.04763074905605, 342.8918930799219, 333.49770827914284, 364.70133411149897, 290.55367441304185, 291.9314144099107, 299.7747303603752, 291.9541905705768, 299.6506222212061, 295.25864921742925, 396.2105831289572, 298.7250207697622, 364.5778874171846, 362.3131093007891, 336.33063187297745, 355.48456897839804, 288.0400212700381, 354.201287726563, 369.9327274703495, 292.54984624842086, 293.40067626863066, 297.48752917936434, 287.2007101547202, 291.8406682292551, 371.3702909500178, 371.82553808708076, 342.4292956146447, 290.93364962902433, 295.01915445324465, 369.9564157004193, 291.6840439767556, 289.90724259504594, 364.16671273729906, 344.7437398755915, 334.4690270804408, 366.170294562654, 372.24249375721797, 292.79681826813595, 289.20616231471547, 345.82872555091546, 295.2736733046873]
# Ours, 1450 285.28748690561224 359.9440333397799 274.09017369650184
Ours = [283.28482643079917, 278.3026847853494, 290.12877249776994, 283.87299657050926, 276.52325056915987, 282.6756227109029, 281.4192504218849, 281.98090007390607, 286.5771354953539, 283.12584723132153, 285.8182234003817, 287.35101507761124, 296.182969960696, 289.4724343588326, 281.5584574926923, 285.21389566471555, 289.307545657145, 279.22569780959395, 294.5294092987404, 284.1882769708922, 287.55050205956843, 285.5574212191331, 286.4324507592893, 295.52449189886954, 280.1561172796724, 278.4011829339029, 280.04529080340194, 281.0945941858336, 283.6064139154068, 280.2771406979417, 288.10415748380154, 283.4735922904007, 289.53772329769777, 283.7957925265645, 280.74726541510574, 285.28051439745593, 283.12032334726854, 286.6499344065825, 285.4907172850833, 283.9719896583273, 285.4173990042452, 288.1432368959191, 295.7924602780918, 287.44779034110275, 296.07391395101666, 288.1704551378695, 291.27963105418866, 279.41011166377416, 292.68632885021003, 275.5301941867618, 285.6208826307019, 293.2519794512952, 285.8629076852896, 281.4695163430454, 282.89485933630084, 281.94084278818644, 280.5637054545796, 287.91949885221646, 284.04382881898226, 281.8633822283996, 284.0867263856705, 282.68152733044286, 283.7865632015479, 292.71861797348237, 287.5362106459121, 283.6168173158907, 283.00117821603465, 281.54182357710107, 285.86298612474945, 279.2031803665814, 274.09017369650184, 284.7424722866287, 278.34383970028654, 285.3859976029673, 279.0776910443534, 280.43025077952245, 287.22398581121956, 278.289397098658, 284.67309386602193, 291.4658719233707, 283.8342916877717, 282.08132959521214, 281.99987428047496, 287.6866253872861, 280.2367263889239, 288.9789992976164, 285.7794339489678, 359.9440333397799, 281.12978082652813, 281.6227381548325, 282.4899788996613, 282.16858913560293, 283.3883885151289, 284.46561096989797, 283.8124541303316, 281.91884001242755, 282.9414807681795, 285.1909302419562, 287.64595599836497, 278.7344707435949]

# episode: 1550
# (286.23291900612486, 346.6276028706984, 274.9842168420126)

def calculate_confidence_interval(data):
    import numpy as np
    from scipy import stats
    # 计算平均值和标准差
    mean = np.mean(data)
    std = np.std(data)
    # 计算置信区间
    confidence_interval = stats.norm.interval(0.95, loc=mean, scale=std/np.sqrt(len(data)))
    return mean, std, confidence_interval

y = []
error_down = []
error_up = []

def switch(target):
    mean, std, confidence_interval = calculate_confidence_interval(target)
    y.append(float('%.2f' % mean))
    error_up.append(max(target))
    error_down.append(min(target))
    print(f"alg & {float('%.2f' % mean)} & {float('%.2f' % std)} & {float('%.2f' % max(target))} & {float('%.2f' % min(target))} & [{float('%.2f' % confidence_interval[0])}, {float('%.2f' % confidence_interval[1])}] \\\\ \n\\hline")

switch(prandom_list)
switch(pnearest_list)
switch(alg_nearest_global)
switch(Ours)

y = np.array(y)
error_up = np.array(error_up)
error_down = np.array(error_down)

print(y)
for i in range(3):
    print(y[i]-y[-1])
    print((y[i]-y[-1])/y[i])

# 绘制误差棒图

plt.errorbar(x, y, yerr=[y-error_down,error_up-y], fmt='ro', capsize=5)
plt.plot(x, y, 'bo-')

plt.text(0.1, y[0], str(y[0]), size=10)
plt.text(1, y[1]+25, str(y[1]), size=10)
plt.text(2+0.05, y[2]+25, str(y[2]), size=10)
plt.text(3-0.2, y[3]+20, str(y[3]), size=10)


# 设置图表标题和坐标轴标签
# plt.title('多轮仿真实验图(15-17-18)')
plt.xlabel('算法')
plt.ylabel('完成时间 / 秒')
plt.yticks([300,400,500,600,700,800])
plt.savefig("avg_finished_time7.0_100_errorbar.png", bbox_inches='tight', pad_inches=0.05, dpi=600)
plt.close('all')