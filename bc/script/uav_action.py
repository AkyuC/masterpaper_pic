import matplotlib.pyplot as plt
import numpy as np
from matplotlib.collections import PatchCollection  

plt.rcParams['font.sans-serif'] = 'SimSun'
plt.rcParams['font.serif'] = 'Times New Roman'
plt.rcParams['font.size'] = 15

plt.figure(figsize=(10,3))

# cs_loc
cs_loc = [(100,100),(-100,100),(100,-100),(-100,-100)]
# 'startPoint'
start_point = [(100,100),(-100,100),(-100,-100)]

locs_green = [[-70, -56], [5, -27], [29, -88], [-14, -27], [-89, -67], [-53, -28], [2, -74], [19, -69], [7, -17], [-5, -88], [-62, -71], [-18, -19], [20, -86], [-6, -17], [-27, -25], [-49, -20], [-8, -33]]
locs_green_i = [0, 3, 9, 11, 13, 16, 17, 20, 28, 29, 33, 34, 36, 37, 38, 42, 43]
locs_blue = [[-30, 14], [-70, 42], [-33, 34], [-90, 53], [-64, 3], [-91, -6], [-95, 25], [-84, 32], [-78, 10], [-21, 69], [-32, 49], [-51, 63], [-32, 3], [-34, 74], [-33, 63]]
locs_blue_i = [1, 2, 8, 15, 21, 22, 24, 25, 26, 31, 32, 40, 46, 48, 49]
locs_yellow = [[60, -26], [8, 25], [59, 4], [24, 44], [42, 79], [62, 65], [93, 55], [51, 20], [92, -57], [79, -25], [34, -21], [3, 59], [-4, 24], [34, -10], [41, 18], [32, 72], [0, 9], [54, 94]]
locs_yellow_i = [4, 5, 6, 7, 10, 12, 14, 18, 19, 23, 27, 30, 35, 39, 41, 44, 45, 47]
locs = [(-70, -56), (-30, 14), (-70, 42), (5, -27), (60, -26), 
            (8, 25), (59, 4), (24, 44), (-33, 34), (29, -88), 
            (42, 79), (-14, -27), (62, 65), (-89, -67), (93, 55), 
            (-90, 53), (-53, -28), (2, -74), (51, 20), (92, -57), 
            (19, -69), (-64, 3), (-91, -6), (79, -25), (-95, 25), 
            (-84, 32), (-78, 10), (34, -21), (7, -17), (-5, -88), 
            (3, 59), (-21, 69), (-32, 49), (-62, -71), (-18, -19), 
            (-4, 24), (20, -86), (-6, -17), (-27, -25), (34, -10), 
            (-51, 63), (41, 18), (-49, -20), (-8, -33), (32, 72), 
            (0, 9), (-32, 3), (54, 94), (-34, 74), (-33, 63)]

# 15, 17, 18
data_set1 = [0.99, 0.93, 0.52, 0.79, 0.65, 0.84, 0.54, 0.97, 0.83, 0.88, 
            0.52, 0.72, 0.80, 0.79, 0.88, 0.61, 0.92, 0.57, 0.89, 0.75,
            0.99, 0.93, 0.52, 0.79, 0.57, 0.89, 0.75, 0.65, 0.61, 0.92,
            0.52, 0.79, 0.65, 0.72, 0.79, 0.88, 0.61, 0.92, 0.80, 0.52,
            0.80, 0.99, 0.79, 0.84, 0.79, 0.93, 0.92, 0.52, 0.88, 0.75]
import random
random.seed(100)
l = []
for i in range(50):
    l.append(round(random.gauss(0.75, 0.085), 2) )
print(l)
data_set2 = [0.74, 0.78, 0.63, 0.76, 0.84, 0.71, 0.71, 0.76, 0.75, 0.63, 0.83, 0.76, 0.8, 0.62, 0.75, 0.67, 0.72, 0.7, 0.68, 0.72, 0.81, 0.8, 0.51, 0.87, 0.92, 0.74, 0.62, 0.93, 0.83, 0.67, 0.74, 0.78, 0.76, 0.67, 0.77, 0.93, 0.6, 0.71, 0.71, 0.72, 0.84, 0.6, 0.81, 0.76, 0.64, 0.75, 0.79, 0.7, 0.84, 0.54]

# partition random
partition_random = [[50, 35, 45, 4, 10, 41, 50, 12, 27, 44, 14, 23, 52, 7, 30, 50, 5, 6, 50, 39, 19, 52, 47, 50, 18, 50], 
 [51, 49, 26, 2, 24, 46, 51, 40, 51, 22, 21, 1, 31, 51, 8, 32, 51, 15, 48, 51, 25, 51], 
 [53, 38, 20, 0, 9, 36, 52, 37, 3, 52, 28, 42, 17, 43, 29, 16, 53, 53, 33, 11, 13, 34, 53]]

# partition nearest
partition_nearest = [[50, 14, 12, 10, 44, 7, 5, 35, 45, 39, 52, 19, 23, 4, 27, 6, 18, 41, 30, 50, 47, 50], 
 [51, 46, 1, 8, 32, 49, 48, 31, 40, 2, 51, 15, 25, 24, 26, 21, 22, 53], 
 [53, 13, 0, 33, 16, 42, 38, 34, 11, 43, 3, 52, 9, 36, 20, 17, 29, 37, 28, 52]]

# nearest
nearest = [[50, 14, 12, 10, 44, 7, 5, 35, 45, 37, 53, 22, 2, 48, 47, 18, 50], 
 [51, 15, 25, 24, 26, 21, 42, 46, 1, 8, 32, 51, 40, 49, 31, 30, 41, 6, 9, 52], 
 [53, 13, 0, 33, 16, 38, 34, 11, 43, 3, 52, 19, 23, 4, 27, 39, 28, 20, 17, 36, 52, 29, 53]]

# Optimal
Optimal = [[50, 47, 10, 44, 7, 5, 35, 45, 37, 3, 27, 52, 9, 36, 20, 17, 29, 39, 52], 
           [51, 15, 2, 25, 24, 26, 22, 21, 46, 1, 8, 51, 40, 49, 31, 48, 32, 30, 12, 50], 
           [53, 13, 0, 33, 16, 42, 38, 34, 11, 43, 28, 52, 19, 23, 4, 6, 18, 41, 14, 50]]
Optimal = [[50, 47, 10, 44, 7, 5, 35, 45, 28, 3, 37, 53, 29, 17, 36, 9, 27, 39, 52], 
           [51, 15, 2, 25, 24, 26, 21, 22, 46, 1, 8, 51, 40, 49, 48, 31, 32, 30, 12, 50], 
           [53, 13, 0, 33, 16, 42, 38, 34, 11, 43, 20, 52, 19, 23, 4, 6, 18, 41, 14, 50]]

# Ours
Ours = [[50, 47, 10, 44, 12, 41, 18, 6, 14, 50, 7, 30, 5, 35, 45, 37, 34, 13, 53], 
 [51, 15, 24, 22, 21, 26, 25, 2, 49, 31, 48, 51, 40, 32, 8, 1, 46, 42, 16, 53], 
 [53, 33, 29, 17, 36, 9, 20, 4, 23, 19, 52, 27, 39, 28, 3, 43, 11, 38, 0, 53]]

def plot_topo(name, locs, partition, paths):
    plt.figure(figsize=(8, 8))

    plt.rcParams['font.sans-serif'] = 'SimSun'
    plt.rcParams['font.serif'] = 'Times New Roman'
    plt.rcParams['font.size'] = 11
    plt.rcParams['axes.unicode_minus'] = False

    pos_node = []
    x = []
    y = []
    x_bs = np.array([100,-100,100,-100])
    y_bs = np.array([100,100,-100,-100])
    plt.scatter(x_bs, y_bs, s=21**2, color='r', facecolors='none', marker='s', linewidth=1.3)
    for i in range(len(x_bs)):
        plt.text(x_bs[i]-4, y_bs[i]-2, 'CS'+str(i))
    for i,(xi,yi) in enumerate(locs):
        x.append(xi)
        y.append(yi)
        if i < 9:
            plt.text(xi-1.5, yi-2, str(i+1))
        else:
            plt.text(xi-2.5, yi-2, str(i+1))
    plt.scatter(x, y, s=15**2, color='black', facecolors='none', linewidth=1.2)
    colors = ["b","g","y"]
    for i,loc in enumerate(partition):
        nloc = np.array(loc)
        plt.scatter(nloc[:,0], nloc[:,1], s=15**2, color=colors[i], facecolors='none', linewidth=1.3)
    plt.xlim((-110,110))
    plt.ylim((-110,110))
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)

    colors = ["y","b","g"]
    for c,path in enumerate(paths):
        for i in range(1,len(path)):
            start = locs[path[i-1]] if path[i-1] < len(locs) else cs_loc[path[i-1]-len(locs)]
            end = locs[path[i]] if path[i] < len(locs) else cs_loc[path[i]-len(locs)]
            plt.annotate('', xy=end,xytext=start, arrowprops=dict(arrowstyle='->',color=colors[c]))
            if i == len(path)-1:
                plt.plot([start[0],end[0]],[start[1],end[1]],color=colors[c],label=f"UAV{c+1}")
        
    plt.legend(loc='best')  

    plt.savefig(f"paths_{name}.png", bbox_inches='tight', pad_inches=0.05, dpi=600)
    plt.close('all')

    return pos_node

name = "partition_random_config1"
plot_topo(name, locs, [locs_blue,locs_green,locs_yellow], partition_random)
name = "partition_nearest_config1"
plot_topo(name, locs, [locs_blue,locs_green,locs_yellow], partition_nearest)
name = "nearest_config1"
plot_topo(name, locs, [locs_blue,locs_green,locs_yellow], nearest)
name = "optimal_config1"
plot_topo(name, locs, [locs_blue,locs_green,locs_yellow], Optimal)
name = "ours_config1"
plot_topo(name, locs, [locs_blue,locs_green,locs_yellow], Ours)

# # [0.74, 0.78, 0.63, 0.76, 0.84, 0.71, 0.71, 0.76, 0.75, 0.63, 0.83, 0.76, 0.8, 0.62, 0.75, 0.67, 0.72, 0.7, 0.68, 0.72, 0.81, 0.8, 0.51, 0.87, 0.92, 0.74, 0.62, 0.93, 0.83, 0.67, 0.74, 0.78, 0.76, 0.67, 0.77, 0.93, 0.6, 0.71, 0.71, 0.72, 0.84, 0.6, 0.81, 0.76, 0.64, 0.75, 0.79, 0.7, 0.84, 0.54]
# Optimal = [[50, 47, 10, 44, 7, 5, 35, 45, 37, 28, 27, 52, 19, 23, 4, 6, 18, 41, 14, 50], 
#            [51, 15, 25, 24, 26, 21, 22, 46, 1, 8, 32, 51, 2, 40, 49, 48, 31, 30, 12, 50], 
#            [53, 13, 33, 0, 16, 42, 38, 34, 11, 43, 3, 39, 52, 9, 36, 20, 17, 29, 53]]
# # [0.81, 0.82, 0.77, 0.62, 0.74, 0.66, 0.78, 0.65, 0.83, 0.8, 0.94, 0.81, 0.82, 0.72, 0.7, 0.89, 0.77, 0.8, 0.78, 0.82, 0.6, 0.59, 0.8, 0.96, 0.58, 0.69, 0.77, 0.7, 0.72, 0.71, 0.84, 0.75, 0.77, 0.64, 0.81, 0.9, 0.8, 0.72, 0.64, 0.79, 0.79, 0.72, 0.54, 0.68, 0.65, 0.66, 0.77, 0.65, 0.72, 0.86]
# Optimal = [[50, 47, 10, 44, 7, 5, 35, 45, 37, 28, 27, 52, 19, 23, 4, 6, 18, 41, 14, 50], 
#            [51, 15, 25, 24, 22, 26, 21, 46, 1, 8, 32, 40, 51, 2, 49, 48, 31, 30, 12, 50], 
#            [53, 13, 0, 33, 16, 42, 38, 34, 11, 43, 3, 39, 52, 9, 36, 20, 17, 29, 53]]
# name = "optimal_config2"
# plot_topo(name, locs, [locs_blue,locs_green,locs_yellow], Optimal)